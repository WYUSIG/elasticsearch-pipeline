<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="com.puppycrawl.tools.checkstyle.Checker">
    <!-- Using spring-framework as reference -->
    <!-- Suppressions -->
    <module name="SuppressionFilter">
        <property name="file" value="checkstyle-suppressions.xml"/>
    </module>

    <!-- Root Checks -->
    <module name="NewlineAtEndOfFileCheck"/>

    <!-- TreeWalker Checks -->
    <module name="TreeWalker">
        <!-- Annotations -->
        <module name="AnnotationUseStyleCheck">
            <property name="elementStyle" value="compact" />
        </module>
        <module name="MissingOverrideCheck" />
        <module name="PackageAnnotationCheck" />
        <module name="AnnotationLocationCheck">
            <property name="allowSamelineSingleParameterlessAnnotation"
                      value="false" />
        </module>

        <!-- Block Checks -->
        <module name="EmptyBlockCheck">
            <property name="option" value="text" />
        </module>
        <module name="LeftCurlyCheck" />
        <module name="RightCurlyCheck">
            <property name="option" value="alone" />
        </module>
        <module name="NeedBracesCheck" />
        <module name="AvoidNestedBlocksCheck" />

        <!-- Class Design -->
        <module name="FinalClassCheck" />
        <module name="InterfaceIsTypeCheck" />
        <module name="HideUtilityClassConstructorCheck" />
        <module name="MutableExceptionCheck">
            <property name="format" value="^.*Exception$" />
        </module>
        <module name="InnerTypeLastCheck" />
        <module name="OneTopLevelClassCheck" />

        <!-- Type Names -->
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9_$]*(?&lt;!Test)$" />
            <property name="tokens" value="CLASS_DEF" />
            <message key="name.invalidPattern"
                     value="Class name ''{0}'' must not end with ''Test'' (checked pattern ''{1}'')." />
        </module>

        <!-- Coding -->
        <module name="CovariantEqualsCheck" />
        <module name="EmptyStatementCheck" />
        <module name="EqualsHashCodeCheck" />
        <module name="SimplifyBooleanExpressionCheck" />
        <module name="SimplifyBooleanReturnCheck" />
        <module name="StringLiteralEqualityCheck" />
        <module name="NestedForDepthCheck">
            <property name="max" value="3" />
        </module>
        <module name="NestedIfDepthCheck">
            <property name="max" value="5" />
        </module>
        <module name="NestedTryDepthCheck">
            <property name="max" value="3" />
        </module>
        <module name="MultipleVariableDeclarationsCheck" />

        <module name="OneStatementPerLineCheck" />

        <!-- Imports -->
        <module name="AvoidStarImportCheck" />
        <module name="RedundantImportCheck" />
        <module name="UnusedImportsCheck">
            <property name="processJavadoc" value="true" />
        </module>
        <module name="ImportOrderCheck">
            <property name="groups" value="java,javax,*" />
            <property name="ordered" value="true" />
            <property name="separated" value="true" />
            <property name="option" value="bottom" />
            <property name="sortStaticImportsAlphabetically" value="true" />
        </module>

        <!-- Javadoc Comments -->
        <module name="JavadocTypeCheck">
            <property name="scope" value="package"/>
            <property name="authorFormat" value=".+\s.+"/>
        </module>
        <module name="JavadocMethodCheck">
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
        </module>
        <module name="JavadocVariableCheck">
            <property name="scope" value="public"/>
        </module>
        <module name="JavadocStyleCheck">
            <property name="checkEmptyJavadoc" value="true"/>
        </module>
        <module name="NonEmptyAtclauseDescriptionCheck" />
        <module name="JavadocTagContinuationIndentationCheck">
            <property name="offset" value="0"/>
        </module>
        <module name="AtclauseOrderCheck">
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF"/>
            <property name="tagOrder" value="@author, @since, @param, @see, @version, @serial, @deprecated"/>
        </module>
        <module name="AtclauseOrderCheck">
            <property name="target" value="METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
            <property name="tagOrder" value="@param, @return, @throws, @since, @see, @deprecated"/>
        </module>

        <!-- Miscellaneous -->
        <module name="CommentsIndentationCheck">
            <property name="tokens" value="BLOCK_COMMENT_BEGIN"/>
        </module>
        <module name="com.puppycrawl.tools.checkstyle.checks.UpperEllCheck" />
        <module name="com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck" />
        <module name="com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck" />

        <!-- Regexp -->
        <module name="RegexpSinglelineJavaCheck">
            <property name="format" value="^\t* +\t*\S" />
            <property name="message"
                      value="Line has leading space characters; indentation should be performed with tabs only." />
            <property name="ignoreComments" value="true" />
        </module>
        <module name="RegexpCheck">
            <property name="format" value="[ \t]+$" />
            <property name="illegalPattern" value="true" />
            <property name="message" value="Trailing whitespace" />
        </module>
        <module
                name="RegexpSinglelineJavaCheck">
            <property name="maximum" value="0" />
            <property name="format"
                      value="assertThatExceptionOfType\((NullPointerException|IllegalArgumentException|IOException|IllegalStateException)\.class\)" />
            <property name="message"
                      value="Please use specialized AssertJ assertThat*Exception method." />
            <property name="ignoreComments" value="true" />
        </module>
        <module name="RegexpSinglelineJavaCheck">
            <property name="id" value="bddMockito"/>
            <property name="maximum" value="0"/>
            <property name="format" value="org\.mockito\.Mockito\.(when|doThrow|doAnswer)" />
            <property name="message" value="Please use BDDMockito." />
            <property name="ignoreComments" value="true" />
        </module>
        <module name="RegexpSinglelineJavaCheck">
            <property name="id" value="expectedExceptionAnnotation"/>
            <property name="maximum" value="0"/>
            <property name="format" value="\@Test\(expected" />
            <property name="message" value="Please use AssertJ assertions." />
            <property name="ignoreComments" value="true" />
        </module>
        <module name="RegexpSinglelineJavaCheck">
            <property name="id" value="junit4Assertions"/>
            <property name="maximum" value="0"/>
            <property name="format" value="org\.junit\.Assert\.assert" />
            <property name="message" value="Please use AssertJ assertions." />
            <property name="ignoreComments" value="true" />
        </module>
        <module name="RegexpSinglelineJavaCheck">
            <property name="id" value="junitJupiterAssertions"/>
            <property name="maximum" value="0"/>
            <property name="format" value="org\.junit\.jupiter\.api\.Assertions\.assert" />
            <property name="message" value="Please use AssertJ assertions." />
            <property name="ignoreComments" value="true" />
        </module>
        <module name="RegexpSinglelineJavaCheck">
            <property name="id" value="testNGAssertions"/>
            <property name="maximum" value="0"/>
            <!-- should cover org.testng.Assert and org.testng.AssertJUnit -->
            <property name="format" value="org\.testng\.Assert(JUnit)?\.assert" />
            <property name="message" value="Please use AssertJ assertions." />
            <property name="ignoreComments" value="true" />
        </module>

    </module>
</module>
